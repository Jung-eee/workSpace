웹 사이트의 URL
웹 사이트는 정적 문서로 구성된 사이트
protocol://host:port/path/file
port,path,file은 생략가능

파라메터
주소 뒤에 추가로 붙는 데이터
?를 사용하여 주소 경로와 구문
http://www.season.com/spring/april.html?weather =sunny&temp=25

HTTP 메소드(GET)
요청 방식에 따라 크게 get/post로 구분
get 요청 방식 - 단순히 서버에게 자원(HTML, 이미지, 문서)등을 URL을 통해 요청하는 방식
필요한 데이터를 URL뒤에 덧붙여 전송
데이터 크기 제약이 있으며 북마킹을 허용,지원
브라우저 캐싱에 의한 보안 문제야기

POST요청방식
주로 폼에서 사용되는 방식으로 웹 건텐츠의 내용을 변경하기 위해 사용
북마킹이안됨(직접쳐서 입력하는 걸 덜 치게 입력하게 하는 것)
필요한 데이터를 HTTP요청의 메세지 바디를 통해 전송
데이터의 양이 많거나 URL의 노출되면 안될 때 사용


웹애플리케이션
웹 사이트 + Dynamic working service (CGI Processing)
CGI(Common Gateway Interface) - 웹 서버에 존재하는 프로그램을 호출 될 수 있는 기술,  Perl, C 등 다양한 언어로 작성
Process loading 방식

ASP,NET, Servlet/JSP

웹 컨테이너 
웹 콘포넌트  실행관리를 위한 프레임 워크 (폴켓 레진 등)
-서블릿과 웹서버간의 커뮤니케이션 지원
-서블릿 라이프시어클 관리
-요청에 대한 멀티 스레딩 지원
-보안 및 오류에 대한 처리 지원

인터페이스 특징
-객체를 만들 수 없다 
-추상메소드를 가지고 있다

-----------------------------------------------------------------------------------------
Servlet 인터페이스와 서블릿 라이프사이클
    init()/service()/destroy()/getSercletConfig()/
    1.요청에 의해서 특정 서블릿 호출
    2.해당 서블릿 생성 및 로드
    3.init() 메소드 호출 -최초 1회 호출
    4.service() 메소드 호출
    5.destr oy() 메소드 호출 - 소멸 직전 호출(하지만 실질적으로 확인하기 힘듦) 
	
-------------------------------------------------------------------------------------
JSP(Java server Page) 
사용자를 위한 동적 뷰를 제공한다
프리젠테이션 코드를 서블릿이 아닌 JSP를 통해 작성함으로써 코드 작성을 간소화 한다.
서블릿과 JSP를 상호보완적으로 사용함으로써 Mode2 아키텍처 기반의 애플리케이션을 작성한다.
웹ㄴ디자이너와 프로그래머의 역할 구분을 보다 증진시킨다.

특징
기본적으로 서브릿 인스턴스로 변환된다
JSP페이지를 작성한 후 저장하면 컨테이너에 의해 (자바)소스변환, 컴파일. 실행이 자동으로 이루어진다.
hello.jsp ===> hello.java ===> hello.xlass =====> 실행(서블릿)
       translation            compile		     runtime
JSP는 서블릿보다 작성 과정이 간단하지만 디버깅은 상대적으로 어렵다.

JSP라이프사이클
기본적으로 서블릿과 동일
  jspInit()메소드
-초기화, 오버라이딩
 jsDestroy()메소드
-소멸, 해체, 오버라딩
 _jspService()메소드 _는 기계코드 우리가 오버라이딩 하지 않음
-jsp페이지 자신, 오버라이딩 불가능

JSP 파일 저장 위치
JSP는 HTML과 동일 위치상에 저장 가능
WEB-INF의 하위 폴더에서도 저장 가능

JSP 주요 태그
  주석  	   <%-- --%>
  지시자      <%@page %> <%include%>  <%@ taglib%> 첫 줄 정의
  (directive)
  스크립팀   <%! 멤버 선언%> <%자바 코드%>  <%= 출력 %>
  엘리먼트
  표현식         ${표현식}
  커스텀 태그   JSTL

page 지시자
 import="Java.util.*"
 contentType = "text/html; charset=UTF-8" MIME타입과 문자 인코딩 설정
 session=true (디폴트값은  true)               해당 페이지가 세션을 지원하려면 true 
 errorPage  "에허를 처리할 페이지"
 isErrorPage="true"   (디폴트값은 false)   이 값이 true 일 때 exception내장 객체 사용가능
 pageEncoding 			    JSP페이지의 문자 인코딩을 정의(ISO -8859-1)
 isELIgnored, isThreadSafe, language, extends , buffer, autoFlush , info

스크립틀릿
  JSP페이지내에서 자바 코드를 사용할 수 있도록 한다.
  주의할 점은 스크립틀릿 내의 자바코드와 HTML코드는 분리되어서 처리되어야 한다.
  스크립틀 코드의 남용은 코드에 대한 가독성을 떨어뜨리고 유지보수를 어렵게 한다.
  <%
	if(age > 10) {
   %>
	  You need a ticket.
  <%	
	 }else{
   %>
	  You are free
   <%

표현식
     Ten is <%= (2  *  5) %>
     Thank you, <b> <%= name %> </b> for registration
     The current day and time is <%= new java.util.Date() %>
     
	}
   %>
   
MVC 패턴
	UI개발자와 비즈니스 개발자와의 분업 개발 제공
	동시 사용자 증가에 따른 시스템 확장성 제공
	Low coupling, High conhesion을 통한 시스템 유지 보수의 편리성 제공한다
	
	
모델 2아키텍쳐
	썬 마이크로시스템의 베스트 가이드 라인
	MVC패턴 구현을 위한 베스트 컴포넌트
	Model   :   (P) Java, Java Beans, EJB (S)  DAO, DTO
	View     :   HTML,JSP,XML      (S) Servlet
	Controller:    Servlet			(S) JSP
	
컨트롤러의 주요 역할
	서블릿에 의해 구현 될 컨드롤러는 다음과 같은 역할은 처리한다.
	클라이언트의 요청 파라메터 정보를 구한다.
	요청 파라메터에 대한 유효성 검증 및 데이터 변환 작업을 처리한다
	요청 처리에 필요한 비즈니스 오퍼레이션을 호출한다.
	요청 처리 결과에 따라 클라이언트에게 보여줄 뷰를 선택한다.
	
서블릿 커뮤니케이션
	서블릿은 다른 서브릿과의 커뮤니케이션이 일반 객체와 달리 제약적이다.
	  사용자가 서블릿 객체를 직접 생성하지 않는다.
	  기본적으로 특정 서비스를 위해 하나의 서블릿 인스턴스를 생성한다.
	따라서 요청 처리를 다른 자원으로 위임할 수 있는 방법이 필요하다.
	
	
속성 Scope와 RequestDispatcher
	RequestDispatcher인터페이스는 서블릿에서 다른 페이지로 포워드 할 수 있는 메소드를 제공한다
	속성 scope는 다른 서블릿(JSP)과 공유해야 할 데이터를 임시적으로 저장할 수 있는 기능을 제공
	request, session, application, page
	
setAttribute(String name,Object obj)로 보관
	
받아올 때는 getAttribute(String name)

setter getter 합친 거 property
	
---서블릿----
	request.setAttribute("userName",userName);
	RequestDispatcher dispatcher = request.getRequestDispatcher("success.jsp");
	dispatcher.forward(request,response);
	
	request.setAttribute("userName",userName);
	response.sendRedirect("success.jsp"); 주소변화, request scope 종료
	
---JSP-----
	String userName = (String)request.getAttribute("userName");
	
	 <%@ page import="" session="" errorPage="" isErrorPage="" contentType="" pageEncoding=""%>
	 
자바 빈즈(Java Beans)
	Bean이란 재사용과 같은 어떤 목적을 가지고 지정된 규칙에 따라 만들어진 클래스 혹은 컴포넌트
	규약	- 받은 인자가 없는 생성자를 가져야 한다. - 받은 프로퍼티에 대한 네이밍 규칙을 준수해야 한다
		- 설정(setter) 메소드의 아규먼트와 접근(getter)메소드의 리턴타입은 동일해야한다.
			public void setName(String name);
			public String getName();
			public void setFemale(boolean female);
			public boolean isFemale();
		- 빈의 연속성을 위해 Serializable 또는 Externalizable 인터페이스를 구현 할 수 있다.
		- 캡슐화를 유지한다. 

JSPp 표준 액셕
	JSP응 다양한 표준 액션 태그르 제공한다
	빈 관련 JSP 표준 액션 태그
		-자바 빈즈를 JSP페이지에 좀 더 쉽게 사용될 수 있또록 제공된 태그	
		-<jsp:useBean><jsp:setProperty><jsp:getProperty><jsp:include><jsp:forward><jsp:param>
		-<jsp:useBean id="user" class="com.varxyz.jv300.domain.User" scope="request"/>
		id: 변속성명, 구문자 
		class: 해당 빈에 대한 완전한 클래스명(추상클래스는 안됨)
		scope: [page(default)| request | session | application]
		type: 빈 참조타입 (폴리모피즘 작용시 부모차입 명시)
		
		<jsp:useBean id="emp"
					 class"com.varxyz.jv300.domain.Manager"
					 scope="request"
					 type="com.varxyz.jv300.domain.Employee"/>
		<jsp: setProperty name="user" property="userId"/>
			name = "자바 빈이름(<jsp:useBean>의 아이디 속성과 동일명)
			property =:"빈의 setProperty명"
			
		
		case1)
			<jsp:useBean id="user"
						 class="com.varxyz.jv300.domain.User"
						 scope="request"/>
			<jsp: setProperty name=""user> property="userId"/>
			
		case2) 신규로 생성 될 때만 몸체 처리
			<jsp:useBean id="user"
						 class="com.varxyz.jv300.domain.User"
						 scope="request">
				<jsp:setProperty name="user" property="userId"/>
			<jsp:useBean>
			
		<% 
			user.setUserId(request.getParameter("userId"));
		%>
		
		<jsp:setProperty name="user" property="userId"
			value="<%=request.getParameter("userId")%>"/>
			
		<jsp:setProperty name="user" property="userId" param="userId"/>
		이 때 주의할 것은 param과 value의 경우 빈타입이 String 또는 Primitive타입
		
		<jsp:setProperty name="user" property="*"/>
		
		
	<jsp:getProperty>태그
		빈이 가지고 있는 프로퍼티 값은 JSP페이지에 출력할 떄 사용
		<jsp:getProperty name="user" property="userId"/>
		
	<jsp:include>태그
		현재 JSP페이지내에 지정 된 페이지를 포함시킨다.
		<jsp:include page="/incl/banner.jsp"/>
		cf)<%@ include file="..."%>
		
	<jsp:include>     			|		<%@ include>
	실행시점 페이지에 포함시킨다			|		변환시점 페이지에 포함
	수정시 자동 업데이트				|		수정시 자동 업데이트 안됨
	정적컨텐츠, JSP, CGI 			|		정적컨텐츠, JSP만 가능
	표현식을 통해 page속성지정 가능     |		표현식을 통한 page속성 지정 불가능
	매개변수 추가 가능
		
	
	<jsp:param>
	
	-mypage.jsp-
	<jsp:include page="header.jsp">
		<jsp:param name="subtitle" value="Welcome to varxyz"/>
	</jsp:include>
	
	-header.jsp-
	<img src ="">${param.subtitle}
	
	
	EL(Expression Language)
	-Since JSP2.0 스펙에서 EL추가
	-EL은 크게 두가지 형태로 사용가
		-액션태그나 커스텀 태그의 속성값으로 사용
		-JSP페이지내에서 텍스트 출력시 사용
	-Sytax: ${addr.city}, ${usr.userId}
	
	JSP액션태그에서
		<jsp:include page="/user/${use.id}/details.jsp"/> => /user/java/details.jsp/.>
	HTML 출력시
	<h3>Welcome %{user.userName} 님</h3> => <h3>Welcome</h3>
	커스텀 태그 속성값으로
	<c:set var="name value "$(user.userName)"/>
	
	${left.right}
	left: EL 내장객체,자바,번, map중의 하나
	right:번의 경우 프로퍼티.MAP의 경우 kEY
	
	${user.userId} = ${user["userID"]}
	${request.Scope.user.userID} //requestScope는 EL 내장객체
	//앱
	${nationMap.kr} = ${nateionMap["kr"]}
	${header.host} = ${header["host"]}
	//배열
	${nations[0]} = ${nations["0"]}
	//List처리
	=> Servlet
		List<String> hobbies = new ArrayList<String>();
		hobbies.add("travel");
		hobbies.add("drive");
		request.setAttribute("hobbies",hobbies);
		
		Map<String,String> teachers = new HashMap<String,String>();
		teachers.put("java","유비")
		
		request.setAttribute("teachers",teachers);
		
	=> JSP
		Your first hobbie is ${hobbies[0]}
		Your Java teacher is ${teachers["java"]}
		
	EL 내장객체
	-pageScope / requestScope / sessionScope / applicationScope
	- param ex)${param.userName}
	- paramValues ex) ${parmValues.fruit[0]}
	- header / headerValues
	- cookie ex)${cookie.userName.Value}
				=> if(cookie[i].getName().equals("userName")){
						out.println(cookie[i].getVlaue());
	- iniParam
	- pageContext ex)${pageContext.request.method} = ${requestScope.method}
	
	EL 연산
	- ${ 1 + 2 * 4} => 9
	- ${"1" + 10} => 11
	- ${ null + 1} => 1
	- ${ 3 div 4} => 0.75
	- ${ 3 / 2} => 1.5
	- ${ 32 % 10} =>2
	- ==, eq
	- !=, ne
	- ${empty someVar}
		someVar이 빈 객체인지 여부 검사
		true : null. "", 길이0, 
		
	-null값에 대한 EL처리 방법
	 속성/프로퍼티가 존재하지 않을 경우 에러 대신 그 부분에 어떤 내용도 출력하지 않는다.
	 산술연산에서 null값은 0으로 처리
	 논리연산에서 null값은 false 처리
	 
	EL2.2부터 객체의 메소드를 호출할 수 있다.
	${x.doSomething()} => JSP 2.1이전버전에서는 컴파일 에러
	
	<%
		Carculator calc = new Carculator();
		request.setAttribute("calc",calc);
	%>
	
	${calc.setAdd(1,3)}
	${calc.getAdd()} //잘 쓰지 않음
	
	JSTL과 커스텀 태그
	JSTL은 표준 태크 라이브러리 (Standard Tag Library)로서 커스텀 태그 중에서 많이 
	사용하는 것들을 모아 JSTL규약을 만들었다.
	
	JSTL을 사용함으로써 스크립트 코드를 사용할 때 보다 간결하고 이해하기 쉬운 JSP코드를 작성할 수 있다.
	
	커스텀 태그는 사용자가 직접 개발한 사용자 정의 태그로서 특정 업무나 기능을 가진
	태그를 개발자가 직접 커스터마이징 할 수 있다.
	
	특징
	JSP에서 자바코드를 제거할 수 있다. 
	커스텀태그는 재사용이 가능하다
	코드에 대한 가독성과 유지보수가 쉽다.
	XML기반의 태그 형식
	다양한 커스텀 태그 라이브러리 제공된
	
	JSTL 태그와 종류
	코어라이브러리 : 변수지원, 흐름제어, URL처리(접두어 : c )
	XML라이브러리 : XML 제어, 변환(접두어 : x)
	국제화라이브러리: 지역, 메세지 숫자, 날짜 형식 (접두어: fmt)
	데이터베이스 라이브러리 : SQL (접두어 : sql)
	함수라이브러리: 컬렉션, String 처리 (접두어 : fn)
	
	JSTL 코어 라이브러리
	set/ if / foreach / url / out 
	
	set - EL변수의 값이나 EL변수의 프로퍼티 값을 지정할 때 사용
	ex)  <c: set var="pageTitle">회원가입</c:set>
	
	<html>
		<head><title>${pageTitle}</title></head>
		...
	</html>
	
	if- 자바의 if블록과 유사한 기능을 제공된
	ex)  <c:if test="조건식"> 조건이 참일 경우 실행코드 </c:if>\
		 <c:if test="${not empty errorMsgs}">에러처리를 여기서 </c:if>
		 
	foreach - 배열, 컬렉션, 맵의 데이터를 순차적으로 처리할 때 사용
	<c:forEach var="message" items="${errorMsgs}">
		<li>${message}</li>
	</c:forEach>
	
	<c:forEach var = "num" begin="1" end="10">
		$(num) ->1부터 10까지 값 출력
	</c:forEach>
	
	url - 컨텍스트 경로를 포함한 URL을 생성해준다.
		  value 속성을 절대경로/상대경로 모두 가능하다	
		  <form action='<c:url value="add_user.do"/>' method="post">
		  
	
	out - 데이터를 출력할 때 사용되는 태그로서 특수문자를 변경 할 수 있는 기능을 제공한다.
		  <c: out value="${param.email}" default="no email provided"/>
		  <c: out ...>출력내용</c:out>